/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/sarek Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {
    // Workflow flags:

    // Mandatory arguments
    // Input options
    input         = null      // No default input
    input_restart = null      // No default automatic input
    step          = 'annotate' // Starts with mapping

    // References
    genome           = 'NCBI.GRCh38'
    igenomes_base    = 's3://ngi-igenomes/igenomes/'
    snpeff_cache     = 's3://annotation-cache/snpeff_cache/'
    vep_cache        = 's3://annotation-cache/vep_cache/'
    igenomes_ignore  = false
    save_reference   = false // Built references not saved
    build_only_index = false // Only build the reference indexes
    download_cache   = false // Do not download annotation cache

    // Local reference files
    fasta            = '/ifs/data/SLURM/nf_pipelines/reference_genomes/hg38.p14.alt.masked.fa'
    fasta_fai        = '/ifs/data/SLURM/nf_pipelines/reference_genomes/hg38.p14.alt.masked.fa.fai'
    dict             = '/ifs/data/SLURM/nf_pipelines/reference_genomes/hg38.p14.alt.masked.dict'
    bwa              = '/ifs/data/SLURM/nf_pipelines/reference_genomes/bwa/'
    dbsnp            = '/ifs/data/SLURM/nf_pipelines/reference_genomes/dbSNP157.GRCh38.vcf.gz'
    dbsnp_tbi        = '/ifs/data/SLURM/nf_pipelines/reference_genomes/dbSNP157.GRCh38.vcf.gz.tbi'
    known_indels     = '/ifs/data/SLURM/nf_pipelines/reference_genomes/Homo_sapiens_assembly38.known_indels.vcf.gz'
    known_indels_tbi = '/ifs/data/SLURM/nf_pipelines/reference_genomes/Homo_sapiens_assembly38.known_indels.vcf.gz.tbi'
    known_snps       = '/ifs/data/SLURM/nf_pipelines/reference_genomes/1000G_omni2.5.hg38.vcf.gz'
    known_snps_tbi   = '/ifs/data/SLURM/nf_pipelines/reference_genomes/1000G_omni2.5.hg38.vcf.gz.tbi'

    // Main options
    no_intervals           = false      // Intervals will be built from the fasta file
    nucleotides_per_second = 200000     // Default interval size
    tools                  = 'vep'       // No default Variant_Calling or Annotation tools
    skip_tools             = null       // All tools (markduplicates + baserecalibrator + QC) are used by default
    split_fastq            = 50000000   // FASTQ files will not be split by default by FASTP

    // Annotation
    bcftools_annotations     = null  // No extra annotation file
    bcftools_annotations_tbi = null  // No extra annotation file index
    bcftools_header_lines    = null  // No header lines to be added to the VCF file
    dbnsfp                   = null // No dbnsfp processed file
    dbnsfp_consequence       = null // No default consequence for dbnsfp plugin
    // dbnsfp_fields            = "rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF" // Default fields for dbnsfp plugin
    dbnsfp_fields = [
        "gnomAD_exomes_AF", "gnomAD_exomes_NFE_AF", "gnomAD_exomes_AC", "gnomAD_exomes_nhomalt", "SIFT4G_converted_rankscore", "SIFT4G_pred",
        "Polyphen2_HDIV_pred", "Polyphen2_HDIV_rankscore", "MutationTaster_pred", "MutationTaster_score", "CADD_phred", "MutationAssessor_pred",
        "MutationAssessor_rankscore", "MutPred_Top5features", "MutPred_protID", "MutPred_rankscore", "MutPred_score", "fathmm-MKL_coding_pred",
        "fathmm-MKL_coding_rankscore", "fathmm-XF_coding_pred", "fathmm-XF_coding_rankscore", "DANN_score", "DEOGEN2_pred", "Eigen-PC-raw_coding_rankscore",
        "Eigen-raw_coding_rankscore", "GERP++_RS_rankscore", "LRT_converted_rankscore", "LRT_pred", "M-CAP_pred", "M-CAP_rankscore", "MPC_rankscore",
        "MVP_rankscore", "MetaLR_pred", "MetaLR_rankscore", "MetaSVM_pred", "MetaSVM_rankscore", "PROVEAN_converted_rankscore", "PROVEAN_pred",
        "REVEL_rankscore", "VEST4_rankscore", "PrimateAI_pred", "PrimateAI_rankscore", "Interpro_domain", "clinvar_MedGen_id", "clinvar_Orphanet_id",
        "BayesDel_addAF_rankscore", "BayesDel_addAF_pred", "BayesDel_noAF_rankscore", "BayesDel_noAF_pred", "LIST-S2_rankscore", "LIST-S2_pred",
        "CADD_phred_hg19", "MetaRNN_rankscore","MetaRNN_pred", "LINSIGHT_rankscore", "GenoCanyon_rankscore", "gMVP_score", "ClinPred_score", "ClinPred_pred",
        "VARITY_R_LOO_score", "VARITY_ER_LOO_score", "ALFA_European_AC", "ALFA_European_AF", "ALFA_Total_AC", "ALFA_Total_AF", "hg19_pos(1-based)"
    ].join(",")
    dbnsfp_tbi               = null // No dbnsfp processed file index
    outdir_cache             = null // No default outdir cache
    spliceai_indel           = null // No spliceai_indel file
    spliceai_indel_tbi       = null // No spliceai_indel file index
    spliceai_snv             = null // No spliceai_snv file
    spliceai_snv_tbi         = null // No spliceai_snv file index
    // vep_custom_args          = "--cache --merged --per_gene --total_length --offline --format tab --canonical --xref_refseq --variant_class --symbol --numbers --mane --protein --biotype --show_ref_allele --hgvs --check_existing --dont_skip --individual all --exclude_predicted --flag_pick_allele_gene --pick_order biotype,rank,mane_select,tsl,canonical,appris,ccds,length"
    vep_custom_args = [
        "--cache", "--merged", "--per_gene", "--total_length", "--offline", "--format tab", "--canonical", "--xref_refseq", "--variant_class", 
        "--symbol", "--numbers", "--mane", "--protein", "--biotype", "--show_ref_allele", "--hgvs", "--check_existing", "--dont_skip", 
        "--individual all", "--exclude_predicted", "--flag_pick_allele_gene --pick_order biotype,rank,mane_select,tsl,canonical,appris,ccds,length"
    ].join(" ")

    vep_dbnsfp               = true // dbnsfp plugin disabled within VEP
    vep_include_fasta        = true // Don't use fasta file for annotation with VEP
    vep_loftee               = null // loftee plugin disabled within VEP
    vep_out_format           = "tab"
    vep_spliceai             = true // spliceai plugin disabled within VEP
    vep_spliceregion         = true // spliceregion plugin disabled within VEP
    vep_version              = "113.0-0"      // Should be updated when we update VEP, needs this to get full path to some plugins

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    help_full                    = false
    show_hidden                  = false
    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null
    test_data_base             = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek3'
    modules_testdata_base_path = null

    // Schema validation default options
    validate_params            = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    // Basic test profile for CI
    test                       { includeConfig 'conf/test.config' }
    test_aws                   {
        includeConfig 'conf/test.config'
        params.sentieon_dnascope_model = "s3://ngi-igenomes/igenomes/Homo_sapiens/GATK/GRCh38/Annotation/Sentieon/SentieonDNAscopeModel1.1.model"
    }
    test_azure                 {
        includeConfig 'conf/test.config'
        params.sentieon_dnascope_model = "az://igenomes/Homo_sapiens/GATK/GRCh38/Annotation/Sentieon/SentieonDNAscopeModel1.1.model"
    }
    // Extra test profiles for full tests on AWS
    test_full                  { includeConfig 'conf/test_full.config' }
    test_full_aws              {
        includeConfig 'conf/test_full.config'
    }
    test_full_azure            {
        includeConfig 'conf/test_full.config'
        params.input         = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/HCC1395_WXS_somatic_full_test_azure.csv'
        params.intervals     = 'az://test-data/sarek/S07604624_Padded_Agilent_SureSelectXT_allexons_V6_UTR.bed'
        params.igenomes_base = "az://igenomes"
    }
    test_full_germline         { includeConfig 'conf/test_full_germline.config' }
    test_full_germline_aws     {
        includeConfig 'conf/test_full_germline.config'
    }
    test_full_germline_azure   {
        includeConfig 'conf/test_full_germline.config'
        params.input         = 'https://raw.githubusercontent.com/nf-core/test-datasets/sarek/testdata/csv/NA12878_WGS_30x_full_test_azure.csv'
        params.igenomes_base = "az://igenomes"
    }
    test_full_germline_ncbench_agilent {
        includeConfig 'conf/test_full_germline_ncbench_agilent.config'
    }
    spark {
        docker.runOptions        = ''
    }

    // Extra test profiles for more complete CI
    alignment_from_everything  { includeConfig 'conf/test/alignment_from_everything.config' }
    alignment_to_fastq         { includeConfig 'conf/test/alignment_to_fastq.config' }
    annotation                 { includeConfig 'conf/test/annotation.config' }
    markduplicates_bam         { includeConfig 'conf/test/markduplicates_bam.config' }
    markduplicates_cram        { includeConfig 'conf/test/markduplicates_cram.config' }
    no_intervals               { includeConfig 'conf/test/no_intervals.config' }
    pair                       { includeConfig 'conf/test/pair.config' }
    prepare_recalibration_bam  { includeConfig 'conf/test/prepare_recalibration_bam.config' }
    prepare_recalibration_cram { includeConfig 'conf/test/prepare_recalibration_cram.config' }
    recalibrate_bam            { includeConfig 'conf/test/recalibrate_bam.config' }
    recalibrate_cram           { includeConfig 'conf/test/recalibrate_cram.config' }
    save_bam_mapped            { includeConfig 'conf/test/save_bam_mapped.config' }
    sentieon_dedup_bam         { includeConfig 'conf/test/sentieon_dedup_bam.config' }
    sentieon_dedup_cram        { includeConfig 'conf/test/sentieon_dedup_cram.config' }
    skip_bqsr                  { includeConfig 'conf/test/skip_bqsr.config' }
    skip_markduplicates        { includeConfig 'conf/test/skip_markduplicates.config' }
    split_fastq                { includeConfig 'conf/test/split_fastq.config' }
    targeted                   { includeConfig 'conf/test/targeted.config' }
    tools                      { includeConfig 'conf/test/tools.config' }
    tools_germline             { includeConfig 'conf/test/tools_germline.config' }
    tools_germline_deepvariant { includeConfig 'conf/test/tools_germline_deepvariant.config' }
    tools_somatic              { includeConfig 'conf/test/tools_somatic.config' }
    tools_somatic_ascat        { includeConfig 'conf/test/tools_somatic_ascat.config' }
    tools_tumoronly            { includeConfig 'conf/test/tools_tumoronly.config' }
    trimming                   { includeConfig 'conf/test/trimming.config' }
    umi                        { includeConfig 'conf/test/umi.config' }
    use_gatk_spark             { includeConfig 'conf/test/use_gatk_spark.config' }
    variantcalling_channels    { includeConfig 'conf/test/variantcalling_channels.config' }
}

// Load nf-core custom profiles from different Institutions
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"

// Load nf-core/sarek custom profiles from different institutions.
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/pipeline/sarek.config" : "/dev/null"

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry    = 'quay.io'
docker.registry       = 'quay.io'
podman.registry       = 'quay.io'
singularity.registry  = 'quay.io'
charliecloud.registry = 'quay.io'

// Load igenomes.config if required
includeConfig !params.igenomes_ignore ? 'conf/igenomes.config' : 'conf/igenomes_ignored.config'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Set bash options
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}
prov {
    enabled = true
    formats {
        bco {
            file = "${params.outdir}/pipeline_info/manifest_${trace_timestamp}.bco.json"
        }
    }
}

manifest {
    name            = 'nf-core/sarek'
    author          = """Maxime Garcia, Szilveszter Juhos, Friederike Hanssen"""
    homePage        = 'https://github.com/nf-core/sarek'
    description     = """An open-source analysis pipeline to detect germline or somatic variants from whole genome or targeted sequencing"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=24.04.2'
    version         = '3.5.1'
    doi             = '10.12688/f1000research.16665.2, 10.1093/nargab/lqae031, 10.5281/zenodo.3476425'
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.2.1' // Validation of pipeline parameters and creation of an input channel from a sample sheet
    id 'nf-prov@1.2.2'   // Provenance reports for pipeline runs
}

validation {
    defaultIgnoreParams = ["genomes"]
    lenientMode = true
    help {
        enabled = true
        command = "nextflow run $manifest.name -profile <docker/singularity/.../institute> --input samplesheet.csv --outdir <OUTDIR>"
        fullParameter = "help_full"
        showHiddenParameter = "show_hidden"
        beforeText = """
-\033[2m----------------------------------------------------\033[0m-
                                        \033[0;32m,--.\033[0;30m/\033[0;32m,-.\033[0m
\033[0;34m        ___     __   __   __   ___     \033[0;32m/,-._.--~\'\033[0m
\033[0;34m  |\\ | |__  __ /  ` /  \\ |__) |__         \033[0;33m}  {\033[0m
\033[0;34m  | \\| |       \\__, \\__/ |  \\ |___     \033[0;32m\\`-._,-`-,\033[0m
                                        \033[0;32m`._,._,\'\033[0m
\033[0;37m      ____\033[0m
\033[0;37m    .´ _  `.\033[0m
\033[0;37m   /  \033[0;32m|\\\033[0m`-_ \\\033[0m     \033[0;34m __        __   ___     \033[0m
\033[0;37m  |   \033[0;32m| \\\033[0m  `-|\033[0m    \033[0;34m|__`  /\\  |__) |__  |__/\033[0m
\033[0;37m   \\ \033[0;32m|   \\\033[0m  /\033[0m     \033[0;34m.__| /¯¯\\ |  \\ |___ |  \\\033[0m
\033[0;37m    `\033[0;32m|\033[0m____\033[0;32m\\\033[0m´\033[0m

\033[0;35m  ${manifest.name} ${manifest.version}\033[0m
-\033[2m----------------------------------------------------\033[0m-
"""
        afterText = """${manifest.doi ? "\n* The pipeline\n" : ""}${manifest.doi.tokenize(",").collect { "    https://doi.org/${it.trim().replace('https://doi.org/','')}"}.join("\n")}${manifest.doi ? "\n" : ""}
* The nf-core framework
    https://doi.org/10.1038/s41587-020-0439-x

* Software dependencies
    https://github.com/${manifest.name}/blob/master/CITATIONS.md
"""
    }
    summary {
        beforeText = validation.help.beforeText
        afterText = validation.help.afterText
    }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules/modules.config'

// Load more modules specific config for DSL2 module specific options

// prepare reference
includeConfig 'conf/modules/download_cache.config'
includeConfig 'conf/modules/prepare_genome.config'
includeConfig 'conf/modules/prepare_intervals.config'

// preprocessing
includeConfig 'conf/modules/aligner.config'
includeConfig 'conf/modules/alignment_to_fastq.config'
includeConfig 'conf/modules/markduplicates.config'
includeConfig 'conf/modules/sentieon_dedup.config'
includeConfig 'conf/modules/prepare_recalibration.config'
includeConfig 'conf/modules/recalibrate.config'
includeConfig 'conf/modules/trimming.config'
includeConfig 'conf/modules/umi.config'

// ngscheckmate
includeConfig 'conf/modules/ngscheckmate.config'

// variant calling
includeConfig 'conf/modules/ascat.config'
includeConfig 'conf/modules/cnvkit.config'
includeConfig 'conf/modules/controlfreec.config'
includeConfig 'conf/modules/deepvariant.config'
includeConfig 'conf/modules/freebayes.config'
includeConfig 'conf/modules/haplotypecaller.config'
includeConfig 'conf/modules/indexcov.config'
includeConfig 'conf/modules/joint_germline.config'
includeConfig 'conf/modules/manta.config'
includeConfig 'conf/modules/mpileup.config'
includeConfig 'conf/modules/msisensorpro.config'
includeConfig 'conf/modules/mutect2.config'
includeConfig 'conf/modules/sentieon_dnascope.config'
includeConfig 'conf/modules/sentieon_dnascope_joint_germline.config'
includeConfig 'conf/modules/sentieon_haplotyper.config'
includeConfig 'conf/modules/sentieon_haplotyper_joint_germline.config'
includeConfig 'conf/modules/strelka.config'
includeConfig 'conf/modules/tiddit.config'
includeConfig 'conf/modules/post_variant_calling.config'
includeConfig 'conf/modules/lofreq.config'

// annotate
includeConfig 'conf/modules/annotate.config'

// Enable SLURM executor
process.executor = 'slurm'
